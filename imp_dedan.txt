server buf_with_sem {
    var count : 0..3;
    var state : {up, down};

    {put | state = down && count < 3} -> {count = count + 1}
    {get | state = down && count > 0} -> {count = count - 1}

    {p | state = up} -> {ok; state = down}
    {v} -> {state = up}

    {empty | count = 0} -> {true}
    {empty | count > 0} -> {false}
}

server semaphore {
    var state : {up, down};

    {p | state = up} -> {state = down}

    {v} -> {state = up}
}

process producer() {
    loop {
        buf.put();
    }
}

process consumer() {
    loop {
        buf.p();
        match buf.empty() {
            true => skip;
            false => buf.get();
        }
        buf.v();
    }
}

-- {ok | loop} -> {buf.p; buf_p}
-- {ok | buf_p} -> {buf.empty; buf_empty}
-- {true | buf_empty} -> {buf.v; loop}
-- {false | buf_empty} -> {buf.get; buf_get}
-- {ok | buf_get} -> {buf.v; loop}

var buf = buf(5) {count = 0};
var mutex = semaphore {state=up};

spawn {
    producer();
    consumer();
}
