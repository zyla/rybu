server: semaphore (servers S_producer, S_consumer_a, S_consumer_b; agents A_producer, A_consumer_a, A_consumer_b),
services {p, v},
states {state_up, state_down},
actions {
  {A_consumer_a.semaphore.p, semaphore.state_up} -> {A_consumer_a.S_consumer_a.ok, semaphore.state_down},
  {A_consumer_a.semaphore.v, semaphore.state_up} -> {A_consumer_a.S_consumer_a.ok, semaphore.state_up},
  {A_consumer_a.semaphore.v, semaphore.state_down} -> {A_consumer_a.S_consumer_a.ok, semaphore.state_up},
  {A_consumer_b.semaphore.p, semaphore.state_up} -> {A_consumer_b.S_consumer_b.ok, semaphore.state_down},
  {A_consumer_b.semaphore.v, semaphore.state_up} -> {A_consumer_b.S_consumer_b.ok, semaphore.state_up},
  {A_consumer_b.semaphore.v, semaphore.state_down} -> {A_consumer_b.S_consumer_b.ok, semaphore.state_up},
  {A_producer.semaphore.p, semaphore.state_up} -> {A_producer.S_producer.ok, semaphore.state_down},
  {A_producer.semaphore.v, semaphore.state_up} -> {A_producer.S_producer.ok, semaphore.state_up},
  {A_producer.semaphore.v, semaphore.state_down} -> {A_producer.S_producer.ok, semaphore.state_up},
};

server: multi_sem (servers S_producer, S_consumer_a, S_consumer_b; agents A_producer, A_consumer_a, A_consumer_b),
services {p, v},
states {value_0, value_1, value_2, value_3},
actions {
  {A_consumer_a.multi_sem.p, multi_sem.value_1} -> {A_consumer_a.S_consumer_a.ok, multi_sem.value_0},
  {A_consumer_a.multi_sem.p, multi_sem.value_2} -> {A_consumer_a.S_consumer_a.ok, multi_sem.value_1},
  {A_consumer_a.multi_sem.p, multi_sem.value_3} -> {A_consumer_a.S_consumer_a.ok, multi_sem.value_2},
  {A_consumer_a.multi_sem.v, multi_sem.value_0} -> {A_consumer_a.S_consumer_a.ok, multi_sem.value_1},
  {A_consumer_a.multi_sem.v, multi_sem.value_1} -> {A_consumer_a.S_consumer_a.ok, multi_sem.value_2},
  {A_consumer_a.multi_sem.v, multi_sem.value_2} -> {A_consumer_a.S_consumer_a.ok, multi_sem.value_3},
  {A_consumer_a.multi_sem.v, multi_sem.value_3} -> {A_consumer_a.S_consumer_a.ok, multi_sem.value_3},
  {A_consumer_b.multi_sem.p, multi_sem.value_1} -> {A_consumer_b.S_consumer_b.ok, multi_sem.value_0},
  {A_consumer_b.multi_sem.p, multi_sem.value_2} -> {A_consumer_b.S_consumer_b.ok, multi_sem.value_1},
  {A_consumer_b.multi_sem.p, multi_sem.value_3} -> {A_consumer_b.S_consumer_b.ok, multi_sem.value_2},
  {A_consumer_b.multi_sem.v, multi_sem.value_0} -> {A_consumer_b.S_consumer_b.ok, multi_sem.value_1},
  {A_consumer_b.multi_sem.v, multi_sem.value_1} -> {A_consumer_b.S_consumer_b.ok, multi_sem.value_2},
  {A_consumer_b.multi_sem.v, multi_sem.value_2} -> {A_consumer_b.S_consumer_b.ok, multi_sem.value_3},
  {A_consumer_b.multi_sem.v, multi_sem.value_3} -> {A_consumer_b.S_consumer_b.ok, multi_sem.value_3},
  {A_producer.multi_sem.p, multi_sem.value_1} -> {A_producer.S_producer.ok, multi_sem.value_0},
  {A_producer.multi_sem.p, multi_sem.value_2} -> {A_producer.S_producer.ok, multi_sem.value_1},
  {A_producer.multi_sem.p, multi_sem.value_3} -> {A_producer.S_producer.ok, multi_sem.value_2},
  {A_producer.multi_sem.v, multi_sem.value_0} -> {A_producer.S_producer.ok, multi_sem.value_1},
  {A_producer.multi_sem.v, multi_sem.value_1} -> {A_producer.S_producer.ok, multi_sem.value_2},
  {A_producer.multi_sem.v, multi_sem.value_2} -> {A_producer.S_producer.ok, multi_sem.value_3},
  {A_producer.multi_sem.v, multi_sem.value_3} -> {A_producer.S_producer.ok, multi_sem.value_3},
};

server: buf (servers S_producer, S_consumer_a, S_consumer_b; agents A_producer, A_consumer_a, A_consumer_b),
services {put, remove, wakeup_after_produce, can_consume},
states {count_0, count_1, count_2, count_3},
actions {
  {A_consumer_a.buf.put, buf.count_0} -> {A_consumer_a.S_consumer_a.ok, buf.count_1},
  {A_consumer_a.buf.put, buf.count_1} -> {A_consumer_a.S_consumer_a.ok, buf.count_2},
  {A_consumer_a.buf.put, buf.count_2} -> {A_consumer_a.S_consumer_a.ok, buf.count_3},
  {A_consumer_a.buf.remove, buf.count_1} -> {A_consumer_a.S_consumer_a.ok, buf.count_0},
  {A_consumer_a.buf.remove, buf.count_2} -> {A_consumer_a.S_consumer_a.ok, buf.count_1},
  {A_consumer_a.buf.remove, buf.count_3} -> {A_consumer_a.S_consumer_a.ok, buf.count_2},
  {A_consumer_a.buf.wakeup_after_produce, buf.count_2} -> {A_consumer_a.S_consumer_a.true, buf.count_2},
  {A_consumer_a.buf.wakeup_after_produce, buf.count_0} -> {A_consumer_a.S_consumer_a.false, buf.count_0},
  {A_consumer_a.buf.wakeup_after_produce, buf.count_1} -> {A_consumer_a.S_consumer_a.false, buf.count_1},
  {A_consumer_a.buf.wakeup_after_produce, buf.count_3} -> {A_consumer_a.S_consumer_a.false, buf.count_3},
  {A_consumer_a.buf.can_consume, buf.count_2} -> {A_consumer_a.S_consumer_a.true, buf.count_2},
  {A_consumer_a.buf.can_consume, buf.count_3} -> {A_consumer_a.S_consumer_a.true, buf.count_3},
  {A_consumer_a.buf.can_consume, buf.count_0} -> {A_consumer_a.S_consumer_a.false, buf.count_0},
  {A_consumer_a.buf.can_consume, buf.count_1} -> {A_consumer_a.S_consumer_a.false, buf.count_1},
  {A_consumer_b.buf.put, buf.count_0} -> {A_consumer_b.S_consumer_b.ok, buf.count_1},
  {A_consumer_b.buf.put, buf.count_1} -> {A_consumer_b.S_consumer_b.ok, buf.count_2},
  {A_consumer_b.buf.put, buf.count_2} -> {A_consumer_b.S_consumer_b.ok, buf.count_3},
  {A_consumer_b.buf.remove, buf.count_1} -> {A_consumer_b.S_consumer_b.ok, buf.count_0},
  {A_consumer_b.buf.remove, buf.count_2} -> {A_consumer_b.S_consumer_b.ok, buf.count_1},
  {A_consumer_b.buf.remove, buf.count_3} -> {A_consumer_b.S_consumer_b.ok, buf.count_2},
  {A_consumer_b.buf.wakeup_after_produce, buf.count_2} -> {A_consumer_b.S_consumer_b.true, buf.count_2},
  {A_consumer_b.buf.wakeup_after_produce, buf.count_0} -> {A_consumer_b.S_consumer_b.false, buf.count_0},
  {A_consumer_b.buf.wakeup_after_produce, buf.count_1} -> {A_consumer_b.S_consumer_b.false, buf.count_1},
  {A_consumer_b.buf.wakeup_after_produce, buf.count_3} -> {A_consumer_b.S_consumer_b.false, buf.count_3},
  {A_consumer_b.buf.can_consume, buf.count_2} -> {A_consumer_b.S_consumer_b.true, buf.count_2},
  {A_consumer_b.buf.can_consume, buf.count_3} -> {A_consumer_b.S_consumer_b.true, buf.count_3},
  {A_consumer_b.buf.can_consume, buf.count_0} -> {A_consumer_b.S_consumer_b.false, buf.count_0},
  {A_consumer_b.buf.can_consume, buf.count_1} -> {A_consumer_b.S_consumer_b.false, buf.count_1},
  {A_producer.buf.put, buf.count_0} -> {A_producer.S_producer.ok, buf.count_1},
  {A_producer.buf.put, buf.count_1} -> {A_producer.S_producer.ok, buf.count_2},
  {A_producer.buf.put, buf.count_2} -> {A_producer.S_producer.ok, buf.count_3},
  {A_producer.buf.remove, buf.count_1} -> {A_producer.S_producer.ok, buf.count_0},
  {A_producer.buf.remove, buf.count_2} -> {A_producer.S_producer.ok, buf.count_1},
  {A_producer.buf.remove, buf.count_3} -> {A_producer.S_producer.ok, buf.count_2},
  {A_producer.buf.wakeup_after_produce, buf.count_2} -> {A_producer.S_producer.true, buf.count_2},
  {A_producer.buf.wakeup_after_produce, buf.count_0} -> {A_producer.S_producer.false, buf.count_0},
  {A_producer.buf.wakeup_after_produce, buf.count_1} -> {A_producer.S_producer.false, buf.count_1},
  {A_producer.buf.wakeup_after_produce, buf.count_3} -> {A_producer.S_producer.false, buf.count_3},
  {A_producer.buf.can_consume, buf.count_2} -> {A_producer.S_producer.true, buf.count_2},
  {A_producer.buf.can_consume, buf.count_3} -> {A_producer.S_producer.true, buf.count_3},
  {A_producer.buf.can_consume, buf.count_0} -> {A_producer.S_producer.false, buf.count_0},
  {A_producer.buf.can_consume, buf.count_1} -> {A_producer.S_producer.false, buf.count_1},
};

server: read_counter (servers S_producer, S_consumer_a, S_consumer_b; agents A_producer, A_consumer_a, A_consumer_b),
services {increment, reset},
states {read_by_0, read_by_1, read_by_2},
actions {
  {A_consumer_a.read_counter.increment, read_counter.read_by_1} -> {A_consumer_a.S_consumer_a.true, read_counter.read_by_2},
  {A_consumer_a.read_counter.increment, read_counter.read_by_0} -> {A_consumer_a.S_consumer_a.false, read_counter.read_by_1},
  {A_consumer_a.read_counter.reset, read_counter.read_by_0} -> {A_consumer_a.S_consumer_a.ok, read_counter.read_by_0},
  {A_consumer_a.read_counter.reset, read_counter.read_by_1} -> {A_consumer_a.S_consumer_a.ok, read_counter.read_by_0},
  {A_consumer_a.read_counter.reset, read_counter.read_by_2} -> {A_consumer_a.S_consumer_a.ok, read_counter.read_by_0},
  {A_consumer_b.read_counter.increment, read_counter.read_by_1} -> {A_consumer_b.S_consumer_b.true, read_counter.read_by_2},
  {A_consumer_b.read_counter.increment, read_counter.read_by_0} -> {A_consumer_b.S_consumer_b.false, read_counter.read_by_1},
  {A_consumer_b.read_counter.reset, read_counter.read_by_0} -> {A_consumer_b.S_consumer_b.ok, read_counter.read_by_0},
  {A_consumer_b.read_counter.reset, read_counter.read_by_1} -> {A_consumer_b.S_consumer_b.ok, read_counter.read_by_0},
  {A_consumer_b.read_counter.reset, read_counter.read_by_2} -> {A_consumer_b.S_consumer_b.ok, read_counter.read_by_0},
};

server: S_producer (servers buf: buf, mutex: semaphore, write_slots: multi_sem, read_by: read_counter, consumer_a_can_read: semaphore, consumer_b_can_read: semaphore; agents A_producer),
services {false, ok, true},
states {s0_write_slots_p, s11_consumer_a_can_read_v, s14_consumer_b_can_read_v, s18_mutex_v, s3_mutex_p, s6_buf_put, s9_buf_wakeup_after_produce},
actions {
  {A_producer.S_producer.ok, S_producer.s0_write_slots_p} -> {A_producer.mutex.p, S_producer.s3_mutex_p},
  {A_producer.S_producer.ok, S_producer.s3_mutex_p} -> {A_producer.buf.put, S_producer.s6_buf_put},
  {A_producer.S_producer.ok, S_producer.s6_buf_put} -> {A_producer.buf.wakeup_after_produce, S_producer.s9_buf_wakeup_after_produce},
  {A_producer.S_producer.true, S_producer.s9_buf_wakeup_after_produce} -> {A_producer.consumer_a_can_read.v, S_producer.s11_consumer_a_can_read_v},
  {A_producer.S_producer.false, S_producer.s9_buf_wakeup_after_produce} -> {A_producer.mutex.v, S_producer.s18_mutex_v},
  {A_producer.S_producer.ok, S_producer.s11_consumer_a_can_read_v} -> {A_producer.consumer_b_can_read.v, S_producer.s14_consumer_b_can_read_v},
  {A_producer.S_producer.ok, S_producer.s14_consumer_b_can_read_v} -> {A_producer.mutex.v, S_producer.s18_mutex_v},
  {A_producer.S_producer.ok, S_producer.s18_mutex_v} -> {A_producer.write_slots.p, S_producer.s0_write_slots_p},
};

server: S_consumer_a (servers buf: buf, mutex: semaphore, write_slots: multi_sem, read_by: read_counter, consumer_a_can_read: semaphore, consumer_b_can_read: semaphore; agents A_consumer_a),
services {false, ok, true},
states {s0_consumer_a_can_read_p, s11_read_by_reset, s14_buf_can_consume, s16_consumer_a_can_read_v, s19_consumer_b_can_read_v, s23_write_slots_v, s27_mutex_v, s3_mutex_p, s6_read_by_increment, s8_buf_remove},
actions {
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s0_consumer_a_can_read_p} -> {A_consumer_a.mutex.p, S_consumer_a.s3_mutex_p},
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s3_mutex_p} -> {A_consumer_a.read_by.increment, S_consumer_a.s6_read_by_increment},
  {A_consumer_a.S_consumer_a.true, S_consumer_a.s6_read_by_increment} -> {A_consumer_a.buf.remove, S_consumer_a.s8_buf_remove},
  {A_consumer_a.S_consumer_a.false, S_consumer_a.s6_read_by_increment} -> {A_consumer_a.mutex.v, S_consumer_a.s27_mutex_v},
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s8_buf_remove} -> {A_consumer_a.read_by.reset, S_consumer_a.s11_read_by_reset},
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s11_read_by_reset} -> {A_consumer_a.buf.can_consume, S_consumer_a.s14_buf_can_consume},
  {A_consumer_a.S_consumer_a.true, S_consumer_a.s14_buf_can_consume} -> {A_consumer_a.consumer_a_can_read.v, S_consumer_a.s16_consumer_a_can_read_v},
  {A_consumer_a.S_consumer_a.false, S_consumer_a.s14_buf_can_consume} -> {A_consumer_a.write_slots.v, S_consumer_a.s23_write_slots_v},
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s16_consumer_a_can_read_v} -> {A_consumer_a.consumer_b_can_read.v, S_consumer_a.s19_consumer_b_can_read_v},
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s19_consumer_b_can_read_v} -> {A_consumer_a.write_slots.v, S_consumer_a.s23_write_slots_v},
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s23_write_slots_v} -> {A_consumer_a.mutex.v, S_consumer_a.s27_mutex_v},
  {A_consumer_a.S_consumer_a.ok, S_consumer_a.s27_mutex_v} -> {A_consumer_a.consumer_a_can_read.p, S_consumer_a.s0_consumer_a_can_read_p},
};

server: S_consumer_b (servers buf: buf, mutex: semaphore, write_slots: multi_sem, read_by: read_counter, consumer_a_can_read: semaphore, consumer_b_can_read: semaphore; agents A_consumer_b),
services {false, ok, true},
states {s0_consumer_b_can_read_p, s11_read_by_reset, s14_buf_can_consume, s16_consumer_a_can_read_v, s19_consumer_b_can_read_v, s23_write_slots_v, s27_mutex_v, s3_mutex_p, s6_read_by_increment, s8_buf_remove},
actions {
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s0_consumer_b_can_read_p} -> {A_consumer_b.mutex.p, S_consumer_b.s3_mutex_p},
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s3_mutex_p} -> {A_consumer_b.read_by.increment, S_consumer_b.s6_read_by_increment},
  {A_consumer_b.S_consumer_b.true, S_consumer_b.s6_read_by_increment} -> {A_consumer_b.buf.remove, S_consumer_b.s8_buf_remove},
  {A_consumer_b.S_consumer_b.false, S_consumer_b.s6_read_by_increment} -> {A_consumer_b.mutex.v, S_consumer_b.s27_mutex_v},
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s8_buf_remove} -> {A_consumer_b.read_by.reset, S_consumer_b.s11_read_by_reset},
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s11_read_by_reset} -> {A_consumer_b.buf.can_consume, S_consumer_b.s14_buf_can_consume},
  {A_consumer_b.S_consumer_b.true, S_consumer_b.s14_buf_can_consume} -> {A_consumer_b.consumer_a_can_read.v, S_consumer_b.s16_consumer_a_can_read_v},
  {A_consumer_b.S_consumer_b.false, S_consumer_b.s14_buf_can_consume} -> {A_consumer_b.write_slots.v, S_consumer_b.s23_write_slots_v},
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s16_consumer_a_can_read_v} -> {A_consumer_b.consumer_b_can_read.v, S_consumer_b.s19_consumer_b_can_read_v},
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s19_consumer_b_can_read_v} -> {A_consumer_b.write_slots.v, S_consumer_b.s23_write_slots_v},
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s23_write_slots_v} -> {A_consumer_b.mutex.v, S_consumer_b.s27_mutex_v},
  {A_consumer_b.S_consumer_b.ok, S_consumer_b.s27_mutex_v} -> {A_consumer_b.consumer_b_can_read.p, S_consumer_b.s0_consumer_b_can_read_p},
};

agents A_producer, A_consumer_a, A_consumer_b;

servers S_producer, S_consumer_a, S_consumer_b, buf: buf, mutex: semaphore, write_slots: multi_sem, read_by: read_counter, consumer_a_can_read: semaphore, consumer_b_can_read: semaphore;

init -> {
  buf(S_producer,S_consumer_a,S_consumer_b,A_producer,A_consumer_a,A_consumer_b).count_0,
  mutex(S_producer,S_consumer_a,S_consumer_b,A_producer,A_consumer_a,A_consumer_b).state_up,
  write_slots(S_producer,S_consumer_a,S_consumer_b,A_producer,A_consumer_a,A_consumer_b).value_3,
  read_by(S_producer,S_consumer_a,S_consumer_b,A_producer,A_consumer_a,A_consumer_b).read_by_0,
  consumer_a_can_read(S_producer,S_consumer_a,S_consumer_b,A_producer,A_consumer_a,A_consumer_b).state_down,
  consumer_b_can_read(S_producer,S_consumer_a,S_consumer_b,A_producer,A_consumer_a,A_consumer_b).state_down,
  S_producer(buf,mutex,write_slots,read_by,consumer_a_can_read,consumer_b_can_read,A_producer).s0_write_slots_p,
  A_producer.write_slots.p,
  S_consumer_a(buf,mutex,write_slots,read_by,consumer_a_can_read,consumer_b_can_read,A_consumer_a).s0_consumer_a_can_read_p,
  A_consumer_a.consumer_a_can_read.p,
  S_consumer_b(buf,mutex,write_slots,read_by,consumer_a_can_read,consumer_b_can_read,A_consumer_b).s0_consumer_b_can_read_p,
  A_consumer_b.consumer_b_can_read.p,
}.

